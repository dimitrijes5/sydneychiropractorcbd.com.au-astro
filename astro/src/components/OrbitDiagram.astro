---
export interface Props {
  width: number;
  height: number;
  center: {
    size: number;
    color: string;
  };
  orbit: {
    count: number;
    size: number;
    color: string;
    lineColor: string;
    lineThickness?: number;
    arcRadius?: number;
    distance?: number;
    rotationDuration?: number; // seconds for one full rotation
  };
}

const { width, height, center, orbit } = Astro.props;

// Default values for optional props
const lineThickness = orbit.lineThickness || 2;
const arcRadius = orbit.arcRadius || 20;
const orbitDistance = orbit.distance || Math.min(width, height) / 3;
const rotationDuration = orbit.rotationDuration || 20;

// Calculate center position
const centerX = width / 2;
const centerY = height / 2;

// Calculate positions for orbiting circles
const orbitPositions = Array.from({ length: orbit.count }, (_, i) => {
  const angle = (i * 2 * Math.PI) / orbit.count;
  const x = centerX + Math.cos(angle) * orbitDistance;
  const y = centerY + Math.sin(angle) * orbitDistance;
  return { x, y, angle };
});

// Function to create arc path (curved inward toward center)
const createArcPath = (startX: number, startY: number, endX: number, endY: number, radius: number) => {
  const midX = (startX + endX) / 2;
  const midY = (startY + endY) / 2;
  
  // Calculate perpendicular offset for arc - reversed to curve inward
  const dx = endX - startX;
  const dy = endY - startY;
  const length = Math.sqrt(dx * dx + dy * dy);
  const offsetX = (dy / length) * radius; // Reversed direction
  const offsetY = (-dx / length) * radius; // Reversed direction
  
  const controlX = midX + offsetX;
  const controlY = midY + offsetY;
  
  return `M ${startX} ${startY} Q ${controlX} ${controlY} ${endX} ${endY}`;
};
---

<style>
  .orbit-rotation {
    animation: rotate var(--rotation-duration) linear infinite;
    transform-origin: var(--center-x) var(--center-y);
  }
  
  .orbit-circle {
    animation: counter-rotate var(--rotation-duration) linear infinite;
    transform-origin: var(--circle-x) var(--circle-y);
  }
  
  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
  @keyframes counter-rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(-360deg);
    }
  }
</style>

<div class="inline-block">
  <svg 
    width={width} 
    height={height} 
    viewBox={`0 0 ${width} ${height}`}
    class="border border-gray-200 rounded-lg shadow-sm"
    style={`--rotation-duration: ${rotationDuration}s; --center-x: ${centerX}px; --center-y: ${centerY}px;`}
  >
    <!-- Orbit circle outline (optional visual guide) -->
    <circle 
      cx={centerX} 
      cy={centerY} 
      r={orbitDistance} 
      fill="none" 
      stroke="#e5e7eb" 
      stroke-width="1" 
      stroke-dasharray="5,5"
      opacity="0.3"
    />
    
    <!-- Rotating group for orbiting elements -->
    <g class="orbit-rotation">
      <!-- Arc connections between orbiting circles -->
      {orbitPositions.map((pos, i) => {
        const nextPos = orbitPositions[(i + 1) % orbitPositions.length];
        return (
          <path
            d={createArcPath(pos.x, pos.y, nextPos.x, nextPos.y, arcRadius)}
            stroke={orbit.lineColor}
            stroke-width={lineThickness * 0.7}
            fill="none"
            opacity="0.6"
          />
        );
      })}
      
      <!-- Orbiting circles with counter-rotation -->
      {orbitPositions.map((pos, i) => (
        <g class="orbit-circle" style={`--circle-x: ${pos.x}px; --circle-y: ${pos.y}px;`}>
          <circle
            cx={pos.x}
            cy={pos.y}
            r={orbit.size / 2}
            fill={orbit.color}
            stroke="#ffffff"
            stroke-width="2"
            class="drop-shadow-sm"
          />
          
          <!-- Optional: Add labels or numbers to orbiting circles -->
          <text
            x={pos.x}
            y={pos.y}
            text-anchor="middle"
            dominant-baseline="middle"
            fill="white"
            font-size="14"
            font-weight="bold"
            class="pointer-events-none select-none"
          >
            {i + 1}
          </text>
        </g>
      ))}
    </g>
    
    <!-- Center circle (static, not rotating) -->
    <circle
      cx={centerX}
      cy={centerY}
      r={center.size / 2}
      fill={center.color}
      stroke="#ffffff"
      stroke-width="3"
      class="drop-shadow-md"
    />
  </svg>
</div> 